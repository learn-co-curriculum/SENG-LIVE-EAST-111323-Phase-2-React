{"ast":null,"code":"var _jsxFileName = \"/Users/greem/Dev/22-Flatiron-teach/greem-practice/lecture-041023-111323/Phase-2-SOLO-111323-Phase-2-React/01_components_and_props/project_showcase/src/components/ProjectList.jsx\";\nimport ProjectItem from \"./ProjectItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ProjectList(_ref) {\n  let {\n    projects\n  } = _ref;\n  //object destructuring\n  // console.log(props) //{}\n  // console.log(props.projects) //[] \n  //                             //access the value of the props by dot notation\n  // console.log(props.num)\n  // // let projects = props.projects //object destructuring\n  // // console.log(\"======\", projects) //[] value\n  // let { projects } = props //object destructuring\n  console.log(\"#######\", projects); //[] value\n  //////////////////////////\n  //.map vs .forEach\n  //////////////////////////\n  /////////.map one line/////////////////\n  // let projectMap = projects.map((eachP) => eachP.name) //one line .map method, doesn't require a return keyword\n  // console.log(projectMap) //[]\n  /////////.map one line/////////////////\n\n  const projectMapMultiLine = projects.map(eachP => {\n    return /*#__PURE__*/_jsxDEV(ProjectItem, {\n      project: eachP\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  });\n  console.log(projectMapMultiLine); //[]\n  // let projectForEach = projects.forEach((eachP) => eachP)\n  // console.log(projectForEach) //undefined\n  // let projectForEachMultiline = projects.forEach((eachP) => {\n  //     return eachP\n  // })\n  // console.log(projectForEachMultiline) //undefined\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: projectMapMultiLine\n  }, void 0, false);\n}\n_c = ProjectList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectList\");","map":{"version":3,"sources":["/Users/greem/Dev/22-Flatiron-teach/greem-practice/lecture-041023-111323/Phase-2-SOLO-111323-Phase-2-React/01_components_and_props/project_showcase/src/components/ProjectList.jsx"],"names":["ProjectItem","ProjectList","projects","console","log","projectMapMultiLine","map","eachP"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;;;AAEA,eAAe,SAASC,WAAT,OAAiC;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAAE;AAE9C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,QAAvB,EAX4C,CAWV;AAElC;AACA;AACA;AAEA;AACA;AACA;AAEI;;AACJ,QAAMG,mBAAmB,GAAGH,QAAQ,CAACI,GAAT,CAAcC,KAAD,IAAW;AAChD,wBAAO,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAF2B,CAA5B;AAGAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,mBAAZ,EAzB4C,CAyBX;AAEjC;AACA;AAEA;AACA;AACA;AACA;;AAGD,sBACC;AAAA,cACKA;AADL,mBADD;AAKF;KAzCuBJ,W","sourcesContent":["import ProjectItem from \"./ProjectItem\"\n\nexport default function ProjectList({projects}) { //object destructuring\n\n    // console.log(props) //{}\n    // console.log(props.projects) //[] \n    //                             //access the value of the props by dot notation\n    // console.log(props.num)\n\n    // // let projects = props.projects //object destructuring\n    // // console.log(\"======\", projects) //[] value\n\n    // let { projects } = props //object destructuring\n    console.log(\"#######\", projects)  //[] value\n    \n    //////////////////////////\n    //.map vs .forEach\n    //////////////////////////\n\n    /////////.map one line/////////////////\n    // let projectMap = projects.map((eachP) => eachP.name) //one line .map method, doesn't require a return keyword\n    // console.log(projectMap) //[]\n\n        /////////.map one line/////////////////\n    const projectMapMultiLine = projects.map((eachP) => {\n        return <ProjectItem project={eachP} />\n    })\n    console.log(projectMapMultiLine) //[]\n\n    // let projectForEach = projects.forEach((eachP) => eachP)\n    // console.log(projectForEach) //undefined\n\n    // let projectForEachMultiline = projects.forEach((eachP) => {\n    //     return eachP\n    // })\n    // console.log(projectForEachMultiline) //undefined\n\n\n   return (\n    <>\n        {projectMapMultiLine}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}